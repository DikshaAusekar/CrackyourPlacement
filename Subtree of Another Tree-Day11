class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if (root == null) {
            return false; // An empty tree cannot contain any subtree
        }

        // Check if the current tree rooted at 'root' contains 'subRoot' as a subtree
        if (isSameTree(root, subRoot)) {
            return true;
        }

        // Recursively check the left and right subtrees
        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }

    private boolean isSameTree(TreeNode s, TreeNode t) {
        if (s == null && t == null) {
            return true; // Both trees are empty
        }
        if (s == null || t == null) {
            return false; // One tree is empty and the other is not
        }
        if (s.val != t.val) {
            return false; // Root values differ
        }
        // Recursively check left and right subtrees
        return isSameTree(s.left, t.left) && isSameTree(s.right, t.right);
    }
}
